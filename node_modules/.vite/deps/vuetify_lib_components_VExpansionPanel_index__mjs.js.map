{
  "version": 3,
  "sources": ["../../vuetify/src/components/VExpansionPanel/VExpansionPanels.tsx", "../../vuetify/src/composables/group.ts", "../../vuetify/src/composables/lazy.ts", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelText.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelTitle.tsx", "../../vuetify/src/composables/elevation.ts", "../../vuetify/src/components/VExpansionPanel/VExpansionPanel.tsx"],
  "sourcesContent": ["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n  ...makeGroupProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n", "// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef, watch } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\nexport interface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': ((val: unknown) => void) | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<Readonly<number[]>>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport interface GroupItemProps extends ExtractPropTypes<ReturnType<typeof makeGroupItemProps>> {\n  'onGroup:selected': ((val: { value: boolean }) => void) | undefined\n}\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = getUid()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => !!(group.disabled.value || props.disabled))\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  watch(isSelected, value => {\n    vm.emit('group:selected', { value })\n  })\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids: number[] = []\n\n  modelValue.forEach(value => {\n    const item = items.find(item => deepEqual(value, item.value))\n    const itemByIndex = items[value]\n\n    if (item?.value != null) {\n      ids.push(item.id)\n    } else if (itemByIndex != null) {\n      ids.push(itemByIndex.id)\n    }\n  })\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values: unknown[] = []\n\n  ids.forEach(id => {\n    const itemIndex = items.findIndex(item => item.id === id)\n    if (~itemIndex) {\n      const item = items[itemIndex]\n      values.push(item.value != null ? item.value : itemIndex)\n    }\n  })\n\n  return values\n}\n", "// Utilities\nimport { computed, shallowRef, watch } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nexport const makeLazyProps = propsFactory({\n  eager: Boolean,\n}, 'lazy')\n\nexport function useLazy (props: { eager: boolean }, active: Ref<boolean>) {\n  const isBooted = shallowRef(false)\n  const hasContent = computed(() => isBooted.value || props.eager || active.value)\n\n  watch(active, () => isBooted.value = true)\n\n  function onAfterLeave () {\n    if (!props.eager) isBooted.value = false\n  }\n\n  return { isBooted, hasContent, onAfterLeave }\n}\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps(),\n}, 'VExpansionPanelText')\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: makeVExpansionPanelTextProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class={[\n            'v-expansion-panel-text',\n            props.class,\n          ]}\n          style={ props.style }\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: ExpansionPanelTitleSlot\n  actions: ExpansionPanelTitleSlot\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: false,\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n}, 'VExpansionPanelTitle')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: makeVExpansionPanelTitleProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          props.style,\n        ]}\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nexport interface ElevationProps {\n  elevation?: number | string | null\n}\n\n// Composables\nexport const makeElevationProps = propsFactory({\n  elevation: {\n    type: [Number, String],\n    validator (v: any) {\n      const value = parseInt(v)\n\n      return (\n        !isNaN(value) &&\n        value >= 0 &&\n        // Material Design has a maximum elevation of 24\n        // https://material.io/design/environment/elevation.html#default-elevations\n        value <= 24\n      )\n    },\n  },\n}, 'elevation')\n\ntype ElevationData = {\n  elevationClasses: Ref<string[]>\n}\n\nexport function useElevation (props: ElevationProps | Ref<number | string | undefined>): ElevationData {\n  const elevationClasses = computed(() => {\n    const elevation = isRef(props) ? props.value : props.elevation\n    const classes: string[] = []\n\n    if (elevation == null) return classes\n\n    classes.push(`elevation-${elevation}`)\n\n    return classes\n  })\n\n  return { elevationClasses }\n}\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeComponentProps(),\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeLazyProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    provideDefaults({\n      VExpansionPanelText: {\n        eager: toRef(props, 'eager'),\n      },\n    })\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          )}\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\">\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          )}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"],
  "mappings": "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",
  "names": ["makeGroupProps", "propsFactory", "modelValue", "type", "default", "undefined", "multiple", "Boolean", "mandatory", "String", "max", "Number", "selectedClass", "disabled", "makeGroupItemProps", "value", "useGroupItem", "props", "injectKey", "required", "arguments", "length", "vm", "getCurrentInstance", "Error", "id", "getUid", "provide", "Symbol", "for", "description", "group", "inject", "toRef", "computed", "register", "onBeforeUnmount", "unregister", "isSelected", "watch", "emit", "toggle", "select", "useGroup", "isUnmounted", "items", "reactive", "selected", "useProxiedModel", "v", "getIds", "wrapInArray", "arr", "getValues", "groupVm", "item", "unwrapped", "key", "children", "findChildrenWithProvide", "vnode", "index", "indexOf", "splice", "push", "forceMandatoryValue", "findIndex", "find", "onMounted", "internalValue", "slice", "includes", "step", "offset", "consoleWarn", "currentId", "currentIndex", "i", "newIndex", "newItem", "state", "prev", "next", "getItemIndex", "ids", "forEach", "deepEqual", "itemByIndex", "values", "itemIndex", "VExpansionPanelSymbol", "Symbol", "for", "allowedVariants", "makeVExpansionPanelsProps", "propsFactory", "color", "String", "variant", "type", "default", "validator", "v", "includes", "readonly", "Boolean", "makeComponentProps", "makeGroupProps", "makeTagProps", "makeThemeProps", "VExpansionPanels", "genericComponent", "name", "props", "emits", "val", "setup", "_ref", "slots", "useGroup", "themeClasses", "provideTheme", "variantClass", "computed", "provideDefaults", "VExpansionPanel", "toRef", "VExpansionPanelTitle", "useRender", "_createVNode", "tag", "value", "class", "style", "makeLazyProps", "propsFactory", "eager", "Boolean", "useLazy", "props", "active", "isBooted", "shallowRef", "hasContent", "computed", "value", "watch", "onAfterLeave", "makeVExpansionPanelTextProps", "propsFactory", "makeComponentProps", "makeLazyProps", "VExpansionPanelText", "genericComponent", "name", "props", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "hasContent", "onAfterLeave", "useLazy", "isSelected", "useRender", "_createVNode", "VExpandTransition", "default", "_withDirectives", "class", "style", "value", "_vShow", "makeVExpansionPanelTitleProps", "propsFactory", "color", "String", "expandIcon", "type", "IconValue", "default", "collapseIcon", "hideActions", "Boolean", "ripple", "Object", "readonly", "makeComponentProps", "VExpansionPanelTitle", "genericComponent", "name", "directives", "Ripple", "props", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "slotProps", "computed", "disabled", "value", "expanded", "isSelected", "useRender", "_withDirectives", "_createVNode", "class", "style", "undefined", "toggle", "actions", "VIcon", "_resolveDirective", "makeElevationProps", "propsFactory", "elevation", "type", "Number", "String", "validator", "v", "value", "parseInt", "isNaN", "useElevation", "props", "elevationClasses", "computed", "isRef", "classes", "push", "makeVExpansionPanelProps", "propsFactory", "title", "String", "text", "bgColor", "makeComponentProps", "makeElevationProps", "makeGroupItemProps", "makeLazyProps", "makeRoundedProps", "makeTagProps", "makeVExpansionPanelTitleProps", "VExpansionPanel", "genericComponent", "name", "props", "emits", "val", "setup", "_ref", "slots", "groupItem", "useGroupItem", "VExpansionPanelSymbol", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "isDisabled", "computed", "disabled", "value", "selectedIndices", "group", "items", "reduce", "arr", "item", "index", "selected", "includes", "id", "push", "isBeforeSelected", "findIndex", "isSelected", "some", "selectedIndex", "isAfterSelected", "provide", "provideDefaults", "VExpansionPanelText", "eager", "toRef", "useRender", "hasText", "hasTitle", "_createVNode", "tag", "class", "style", "default", "VExpansionPanelTitle", "collapseIcon", "color", "expandIcon", "hideActions", "ripple"]
}
